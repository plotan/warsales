<div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6 text-indigo-700">üõçÔ∏è New Transaction</h1>

    <div class="bg-gradient-to-br from-white to-indigo-50 p-6 rounded-xl shadow-lg mb-4">
        <div class="bg-white p-4 rounded-lg shadow-sm mb-6">
            <div class="flex flex-wrap gap-4 mb-4">
                <div class="flex-1 min-w-[200px]">
                    <label class="block text-sm font-medium text-indigo-600 mb-2">Select Product</label>
                    <select id="productSelect" class="w-full p-3 border-2 border-indigo-200 rounded-lg focus:border-indigo-500 focus:ring focus:ring-indigo-200 transition-all">
                        <option value="">Choose a product ‚ú®</option>
                        <% products.forEach(product => { %>
                            <option value="<%= JSON.stringify(product) %>">
                                üè∑Ô∏è <%= product.name %> - IDR <%= product.price.toLocaleString('id-ID') %>
                            </option>
                        <% }) %>
                    </select>
                </div>
                <div class="w-32">
                    <label class="block text-sm font-medium text-indigo-600 mb-2">Quantity</label>
                    <input type="number" id="quantity" min="1" value="1" class="w-full p-3 border-2 border-indigo-200 rounded-lg focus:border-indigo-500 focus:ring focus:ring-indigo-200 transition-all">
                </div>
                <div class="flex items-end">
                    <button onclick="addItem()" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg transition-all transform hover:scale-105 flex items-center">
                        <span class="mr-2">‚ûï</span> Add Item
                    </button>
                </div>
            </div>
        </div>

        <div class="bg-white p-4 rounded-lg shadow-sm">
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="bg-indigo-50">
                            <th class="px-6 py-3 text-left text-indigo-600">Product</th>
                            <th class="px-6 py-3 text-left text-indigo-600">Price</th>
                            <th class="px-6 py-3 text-left text-indigo-600">Quantity</th>
                            <th class="px-6 py-3 text-left text-indigo-600">Subtotal</th>
                            <th class="px-6 py-3 text-left text-indigo-600">Action</th>
                        </tr>
                    </thead>
                    <tbody id="itemsList"></tbody>
                    <tfoot>
                        <tr class="font-bold bg-indigo-50">
                            <td colspan="3" class="px-6 py-4 text-right text-indigo-700">Total Amount:</td>
                            <td id="totalAmount" class="px-6 py-4 text-indigo-700">IDR 0</td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>

            <div class="mt-6 flex justify-end">
                <button onclick="confirmTransaction()" class="bg-green-500 hover:bg-green-600 text-white px-8 py-3 rounded-lg transition-all transform hover:scale-105 flex items-center text-lg font-semibold">
                    <span class="mr-2">‚úÖ</span> Confirm Transaction
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let items = [];

function addItem() {
    const productSelect = document.getElementById('productSelect');
    const quantityInput = document.getElementById('quantity');
    
    if (!productSelect.value) return alert('Please select a product');
    
    const product = JSON.parse(productSelect.value);
    const quantity = parseInt(quantityInput.value);
    
    if (quantity <= 0) return alert('Quantity must be greater than 0');
    if (quantity > product.stock) return alert('Not enough stock available');
    
    const existingItem = items.find(item => item.id === product.id);
    if (existingItem) {
        if (existingItem.quantity + quantity > product.stock) {
            return alert('Not enough stock available');
        }
        existingItem.quantity += quantity;
    } else {
        items.push({
            id: product.id,
            name: product.name,
            price: product.price,
            quantity
        });
    }
    
    updateTable();
    productSelect.value = '';
    quantityInput.value = 1;
}

function removeItem(index) {
    items.splice(index, 1);
    updateTable();
}

function updateTable() {
    const tbody = document.getElementById('itemsList');
    const total = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    tbody.innerHTML = items.map((item, index) => `
        <tr class="border-b border-indigo-100 hover:bg-indigo-50 transition-colors">
            <td class="px-6 py-4">${item.name}</td>
            <td class="px-6 py-4">IDR ${item.price.toLocaleString('id-ID')}</td>
            <td class="px-6 py-4">${item.quantity}</td>
            <td class="px-6 py-4">IDR ${(item.price * item.quantity).toLocaleString('id-ID')}</td>
            <td class="px-6 py-4">
                <button onclick="removeItem(${index})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg transition-all transform hover:scale-105">
                    üóëÔ∏è Remove
                </button>
            </td>
        </tr>
    `).join('');
    
    document.getElementById('totalAmount').textContent = `IDR ${total.toLocaleString('id-ID')}`;
}

async function confirmTransaction() {
    if (items.length === 0) return alert('Please add items to the transaction');
    
    try {
        const response = await fetch('/transactions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ items })
        });
        
        if (!response.ok) throw new Error('Transaction failed');
        
        const transaction = await response.json();
        window.location.href = '/history';
    } catch (error) {
        alert('Failed to process transaction. Please try again.');
    }
}
</script>